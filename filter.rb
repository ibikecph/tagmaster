# tool for converting a raw RFID log file into a file that is suitable for public release
# the raw input will be parsed to extract the RFIID ids, tiemstamp, etc
# the tag id will be matched against a whitelist of known tags. unknown tags will be discarded.
# the id of accepted tags be encrypted, and output written in the format:
# location,timestamp,encrypted_id



require_relative 'tagp.rb'

valid =
[
  72351746,72351747,72351749,72351751,72351753,72351760,72351761,72351762,72351764,72351765,72351766,72351768,
  72351769,72351778,72351781,72351782,72351783,72351784,72351785,72351794,72351796,72351800,72351801,72351808,
  72351809,72351810,72351817,72351826,72351827,72351829,72351831,72366389,72366391,72366392,72366393,72366404,
  72366405,72366406,72366407,72366408,72366409,72366416,72366417,72366418,72366419,72366420,72366421,72366422,
  72366423,72366424,72366425,72366432,72366433,72366434,72366435,72366436,72366437,72366438,72366439,72366440,
  72366441,72366448,72366449,72366450,72366451,72366452,72366453,72366454,72366455,72366456,72366457,72366464,
  72366465,72366466,72366467,72366468,72366469,72366470,72366471,72366472,72366473,72366480,72366481,72366482,
  72366483,72366484,72366485,72366486,72366487,72366488,72366489,72368128,72368129,72368130,72368131,72368132,
  72368133,72368134,72368135,72368136,72368137,72368144,72368145,72368146,72368147,72368148,72368149,72368150,
  72368151,72368152,72368153,72368160,72368161,72368162,72368163,72368164,72368165,72368166,72368167,72368168,
  72368169,72368176,72368177,72368178,72368179,72368180,72368181,72368182,72368183,72368184,72368185,72368192,
  72368193,72368194,72368195,72368196,72368197,72368198,72368199,72368200,72368201,72368208,72368209,72368210,
  72368211,72368212,72368213,72368214,72368215,72368216,72368217,72368224,72368225,72368226,72368227,72368228,
  72368229,72368230,72368231,72368232,72368233,72368240,72368241,72368242,72368243,72368244,72368245,72368246,
  72368247,72368248,72368249,72368256,72368257,72368258,72368259,72368260,72368261,72368262,72368263,72368264,
  72368265,72368272,72368273,72368274,72368275,72368276,72368277,72368278,72368279,72368280,72368281,72368384,
  72368385,72368386,72368387,72368388,72368389,72368390,72368391,72368392,72368393,72368400,72368401,72368402,
  72368403,72368404,72368405,72368406,72368407,72368408,72368409,72368416,72368417,72368418,72368419,72368420,
  72368421,72368422,72368423,72368424,72368425,72368432,72368433,72368434,72368435,72368436,72368437,72368438,
  72368439,72368440,72368441,72368448,72368449,72368450,72368451,72368452,72368453,72368454,72368455,72368456,
  72368457,72368464,72368466,72368467,72368468,72368469,72368470,72368471,72368472,72368473,72368480,72368481,
  72368482,72368483,72368484,72368485,72368486,72368487,72368488,72368489,72368496,72368497,72368498,72368499,
  72368500,72368501,72368502,72368503,72368504,72368505,72368512,72368513,72368514,72368515,72368516,72368518,
  72368519,72368521,72368528,72368529,72368530,72368531,72368532,72368533,72368534,72368535,72368536,72368641,
  72368643,72368644,72368645,72368646,72368647,72368648,72368649,72368656,72368657,72368658,72368659,72368660,
  72368661,72368662,72368663,72368664,72368665,72368672,72368673,72368675,72368676,72368677,72368678,72368679,
  72368680,72368681,72368688,72368689,72368690,72368691,72368692,72368693,72368694,72368695,72368696,72368697,
  72368705,72368706,72368708,72368709,72368711,72368712,72368713,72368724,72368726,72368729,72368736,72368741,
  72368742,72368745,72368752,72368757,72368758,72368759,72368768,72368785,72368789,72368790,72368899,72368928,
  72368950,72369008,72369041,72369159,72369160,72369168,72369169,72369173,72369175,72369969,72369985,72369993,
  72370007,72370019,72370021,72370022,72370023,72370024,72370032,72370034,72370036,72370053,72370054,72370055,
  72370057,72370066,72370070,72370072,72370178,72370179,72370180,72370192,72370193,72370198,72370200,72370208,
  72370209,72370210,72370212,72370214,72370216,72370224,72370227,72370230,72370231,72370233,72370241,72370243,
  72370259,72370260,72370262,72370265,72370272,72370274,72370275,72370278,72370279,72370280,72370288,72370289,
  72370290,72370291,72370292,72370293,72370294,72370295,72370296,72370297,72370304,72370305,72370306,72370308,
  72370309,72370312,72370313,72370320,72370321,72370323,72370324,72370325,72370326,72370327,72370328,72370329,
  72370433,72370434,72370435,72370437,72370438,72370439,72370440,72370441,72370448,72370449,72370450,72370451,
  72370452,72370453,72370455,72370456,72370457,72370465,72370467,72370468,72370470,72370471,72370472,72370480,
  72370481,72370482,72370484,72370485,72370488,72370496,72370497,72370499,72370501,72370503,72370504,72370505,
  72370515,72370516,72370517,72370518,72370519,72370531,72370533,72370534,72370535,72370537,72370544,72370545,
  72370548,72370552,72370560,72370561,72370562,72370563,72370564,72370566,72370567,72370579,72370580,72370581,
  72370583,72370584,72372224,72373506,72390804,72390962
]

locations = {
  "95.209.153.166"=> 0,
  "80.251.207.77" => 1,
  "95.209.153.196"=> 2,
  "95.209.153.202"=> 3,
  "95.209.153.195"=> 4,
  "212.27.0.15"=>    5,
  "212.27.0.150"=>   6,
  "212.27.0.153"=>   7,
  "212.27.0.154"=>   8,
  "212.27.0.155"=>   9
}

path = 'data.log'
now = Time.now
key = "GjsjGH7h5hHC6c73FvszwxnfGs77hdHwdnn3dx8znahHHJbdbfjeje8yb"

good = 0
bad = 0
File.new(path).each_line do |line|
  begin
    if line =~ /(\d+\.\d+\.\d+\.\d+).+(EVNTTAG [^\s]*)/
      ip,event =  $1, $2
      e = Tagp::Tagp.parse event, now
      location = locations[ip]
      if location && valid.include?(e.id)
        good += 1
        puts "#{location},#{e.timestamp},#{e.encrypted_id(key)}"
      end
    end
  rescue ArgumentError
    bad += 1
  rescue Tagp::TagError => e
    bad += 1
  end
end

#puts "Rows: #{good}"
#puts "Bad: #{bad}"
