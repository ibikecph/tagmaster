#!/usr/bin/env ruby
#note: the shebang above expects ruby to be intalled through rbenv

# TAGP receiver/distributor for use with TagMaster RFID readers.
# The antennas/readers connect to the server via TCP and the TAGP protocol and transmits events as they happen.
# The server then queues the events and passes them to a separate receiver.

# There is a problem with lost connections that causes more and more sockets to be left open.
# Eventurally this results in the script failing. A workaround is to restart the script regularly, like once a day.

# Number of open files can be checked using;
# pa aux                # find process
# lsof -p 667           # show open files
# lsof -p 667 | wc -l   # count open files

require 'rubygems'
require './server'
require './distributor'
require 'yaml'

module Tagp
  class Backend < Server

    def initialize settings
      @settings = settings
      raise "Settings is empty" unless @settings
      raise "Port settings is missing" unless @settings["port"]
      raise "Locations settings is missing" unless @settings["locations"]
      raise "Locations settings is empty" unless @settings["locations"].is_a?(Hash) && @settings["locations"].size>0
      raise "Endpoint settings is missing" unless @settings["endpoint"]
      raise "Retry delay settings is missing" unless @settings["retry_delay"]
      raise "Post timeout settings is missing" unless @settings["post_timeout"]

      super @settings["port"]
      @distributor = Distributor.new(@settings)
      @distributor.start
    end
    
    def accept? connection
      @settings["locations"].include? connection[:ip]
    end

    def event connection, e
      super connection, e
      location = @settings["locations"][connection[:ip]]
      @distributor.enqueue [location,format_time(e.timestamp), e.type, e.id_hex ]
    end
    
  end
end


# load settings
settings = YAML.load_file('./tagp.yml')

# run until stopped
Tagp::Backend.new(settings).run
